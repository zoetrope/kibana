[[settings]]
== Settings

Kibanaを使うためには、1つ以上のインデックスパターンを設定することにより、探索したいElasticsearchのインデックスをKibanaに伝えなければなりません。
それ以外にも、以下のような設定をおこなうことができます:

* データから、動的に値を計算するスクリプトフィールドの作成
なお、スクリプトフィールドは、見たり可視化することはできますが、検索対象にすることはできません。
* テーブルに表示する列の数や、もっともポピュラーなフィールドをいくつ表示するかなどの、高度なオプションの設定
ただし、相互に互換性のない値を設定することが可能になっているため、高度なオプションを変更するときは注意してください。
* 本番環境でKibanaを使うための設定

[float]
[[settings-create-pattern]]
=== Elasticsearchに接続するためのインデックスパターンの作成
1つの _インデックスパターン_ は、Kibanaで探索したい1つまたは複数のElasticsearchのインデックスを同一に扱います。
Kibanaは特定のパターンにマッチするインデックス名を探します。
パターン中のアスタリスク(*)は、ゼロ文字以上の文字列にマッチします。
たとえば、 `myindex-*` というパターンは、 `myindex-1`, `myindex-2` など、名前が `myindex-` から始まるインデックスすべてにマッチします。

もし、インデックス名をつくるために、イベントの時間を使う場合(例えば、logstashからElasticsearchにデータを入れた場合など)、インデックスパターンは、日付のフォーマットを含むこともできます。
If you use event times to create index names (for example, if you're pushing data into Elasticsearch from Logstash), the index pattern can also contain a date format.
この場合、パターンの中の静的なテキストは角括弧で囲まれていなければなりません。そして <<date-format-tokens>> で説明されているトークンを使って日付のフォーマットを指定します。

たとえば、 `[logstash-]YYYY.MM.DD` は、インデックス名が `logstash-` というプリフィックスに `YYYY.MM.DD` 形式の日付を付け加えたものであるインデックスすべてにマッチします。`logstash-2015.01.31`, `logstash-2015-02-01` のような。

インデックスパターンは、単純に単一のインデックス名にすることもできます。

Elasticsearchに接続するためのインデックスパターンをつくるには:

. *Settings > Indices* タブを開きます。
. Elasticsearchのインデックスにマッチするインデックスパターンを指定します。
デフォルトでは、LogstashによってElasticsearchにログデータが投入されているものとして推測します。
+
NOTE: トップレベルのタブを切り替えるとき、Kibanaはあなたがどこにいたのかを覚えています。
たとえば、Settingsタブで特定のインデックスパターンを見て、Discoverタブに切り替えて、またSettingsタブに戻ってくると、Kibanaは最後に見ていたインデックスパターンを表示します。
パターンの作成フォームを開くには、インデックスパターンの一覧から *Add* ボタンをクリックします。

. もし、時系列でデータの比較をするために利用したいタイムスタンプのフィールドがインデックスに含まれていた場合、 *Index contains time-based events* オプションを選択し、タイムスタンプを含むインデックスフィールドを選択してください。
Kibanaはタイムスタンプを含むフィールドのすべてをリストアップするために、インデックスのマッピングを読み取ります。

. 新しいインデックスが定期的に作られて、そのインデックス名にタイムスタンプが含まれる場合は *Use event times to create index names* オプションを有効にし *Index pattern interval* を選択してください。
これは、指定した期間のデータを含むインデックスだけを検索するようになるので、検索性能が改善します。
Logstashを使ってElasticsearchにデータを入れているのであれば、もっとも適切な設定です。


. *Create* ボタンをクリックして、インデックスパターンを追加します。

. *favorite* ボタンをクリックすると、新しいパターンがDiscoverタブを開いたときにデフォルトで読み込まれるパターンとして設定されます。

[float]
[[date-format-tokens]]
.Date Format Tokens
[horizontal]
`M`::	Month - cardinal: 1 2 3 ... 12
`Mo`:: Month - ordinal:	1st 2nd 3rd ... 12th
`MM`:: Month - two digit: 	01 02 03 ... 12
`MMM`:: Month - abbreviation: Jan Feb Mar ... Dec
`MMMM`:: Month - full: January February March ... December
`Q`::	Quarter: 1 2 3 4
`D`::	Day of Month - cardinal: 1 2 3 ... 31
`Do`:: Day of Month - ordinal: 1st 2nd 3rd ... 31st
`DD`:: Day of Month - two digit:	01 02 03 ... 31
`DDD`:: Day of Year - cardinal: 1 2 3 ... 365
`DDDo`:: Day of Year - ordinal:	1st 2nd 3rd ... 365th
`DDDD`:: Day of Year - three digit: 001 002 ... 364 365
`d`::	Day of Week - cardinal: 0 1 3 ... 6
`do`:: Day of Week - ordinal:	0th 1st 2nd ... 6th
`dd`:: Day of Week - 2-letter abbreviation:	Su Mo Tu ... Sa
`ddd`:: Day of Week - 3-letter abbreviation: Sun Mon Tue ... Sat
`dddd`:: Day of Week - full: Sunday Monday Tuesday ... Saturday
`e`::	Day of Week (locale): 0 1 2 ... 6
`E`::	Day of Week (ISO): 1 2 3 ... 7
`w`::	Week of Year - cardinal (locale): 1 2 3 ... 53
`wo`:: Week of Year - ordinal (locale): 1st 2nd 3rd ... 53rd
`ww`:: Week of Year - 2-digit (locale): 01 02 03 ... 53
`W`::	Week of Year - cardinal (ISO): 1 2 3 ... 53
`Wo`:: Week of Year - ordinal (ISO): 1st 2nd 3rd ... 53rd
`WW`:: Week of Year - two-digit (ISO): 01 02 03 ... 53
`YY`:: Year - two digit:	70 71 72 ... 30
`YYYY`:: Year - four digit: 1970 1971 1972 ... 2030
`gg`:: Week Year - two digit (locale):	70 71 72 ... 30
`gggg`:: Week Year - four digit (locale):	1970 1971 1972 ... 2030
`GG`:: Week Year - two digit (ISO):	70 71 72 ... 30
`GGGG`::	Week Year - four digit (ISO): 1970 1971 1972 ... 2030
`A`::	AM/PM: AM PM
`a`::	am/pm: am pm
`H`::	Hour: 0 1 2 ... 23
`HH`:: Hour - two digit: 00 01 02 ... 23
`h`::	Hour - 12-hour clock: 1 2 3 ... 12
`hh`:: Hour - 12-hour clock, 2 digit:	01 02 03 ... 12
`m`::	Minute: 0 1 2 ... 59
`mm`:: Minute - two-digit:	00 01 02 ... 59
`s`::	Second: 0 1 2 ...  59
`ss`:: Second - two-digit: 00 01 02 ... 59
`S`::	Fractional Second - 10ths: 0 1 2 ... 9
`SS`:: Fractional Second - 100ths: 	0 1 ... 98 99
`SSS`:: Fractional Seconds - 1000ths:	0 1 ... 998 999
`Z`::	Timezone - zero UTC offset (hh:mm format): -07:00 -06:00 -05:00 .. +07:00
`ZZ`:: Timezone - zero UTC offset (hhmm format):	-0700 -0600 -0500 ... +0700
`X`:: Unix Timestamp:	1360013296
`x`::	Unix Millisecond Timestamp: 1360013296123

[float]
[[set-default-pattern]]
=== デフォルトインデックスパターンの設定
デフォルトインデックスパターンは、 *Discover* タブを開いたときに自動的にロードされます。
Kibanaは、 *Settings > Indices* タブのインデックスパターンの一覧の、デフォルトに設定されているインデックスパターンの名前の左側に星マークを表示します。
最初に作成したパターンは、自動的にデフォルトパターンに設定されます。

違うパターンをデフォルトインデックスパターンに設定するには:

. *Settings > Indices* タブを開く。
. インデックスパターンの一覧の中から、デフォルトに設定したいパターンを選択する。
. パターンの *Favorite* ボタンをクリックする。

NOTE: *Advanced > Settings* からデフォルトインデックスパターンを手動で設定することもできます。

[float]
[[reload-fields]]
=== インデックスフィールドの一覧を再読み込みする
インデックスのマッピングを追加したとき、Kibanaは自動的にパターンにマッチするインデックスをスキャンし、インデックスフィールドの一覧を表示します。
新しく追加されたフィールド見つけ出すために、インデックスフィールドの一覧を再読込することができます。

インデックスフィールドの一覧を再読込すると、Kibanaのフィールドの人気カウンターもリセットされます。
人気カウンターとは、もっともよく利用されているフィールドの記録を保持したり、リストの中での並び替えに利用されたりします。

インデックスフィールドの一覧を再読込するには:

. *Settings > Indices* タブを開く。
. インデックスパターンの一覧からインデックスパターンを選択する。
. パターンの *Reload* ボタンをクリックする。

[float]
[[delete-pattern]]
=== インデックスパターンの削除
インデックスパターンを削除するには:

. *Settings > Indices* を開く。
. インデックスパターンの一覧から削除したいパターンを選択する。
. パターンの *Delete* ボタンをクリックする。
. 削除したいインデックスパターンであることを確認する。

[[managing-fields]]
=== フィールドの管理
インデックスパターンのフィールドは、テーブルの中に一覧表示されます。
あるカラムでテーブルを並び替えるには、そのカラムのヘッダをクリックしてください。
フィールドのプロパティを編集するには、カラムの右端にある *Controls* ボタンをクリックしてください。
*Format* ドロップダウンから、フィールドのフォーマットを手動で設定することができます。
フォーマットのオプションは、フィールドの型に応じて変わります。

*Popularity* テキストフィールドから、フィールドの人気値を望む値に変更することもできます。
*Update Field* ボタンをクリックすると変更を確定します。また、 *Cancel* をクリックするとフィールドの一覧に戻ります。

[float]
[[create-scripted-field]]
=== スクリプトフィールドの生成
スクリプトフィールドは、Elasticsearchのインデックスに入っているデータから、動的に新しい値を計算します。
スクリプトフィールドのデータは、ドキュメントのデータの一部としてDiscoverタブに表示されます。また、スクリプトフィールドを可視化に利用することもできます。
スクリプトフィールドの値は、インデックスが作られるときではなくクエリの実行時に計算されます。ただし検索時には計算されません。

WARNING: スクリプトフィールドで動的にデータを計算することは、コンピュータリソースにとってとても厳しく、Kibanaのパフォーマンスに直接影響を与えます。
また、スクリプトフィールドにバリデーション機能が組み込まれていないことを覚えておいてください。
そのため、もしスクリプトに不具合があった場合、動的に生成されたデータを見ようとしたときはいつでも例外が発生するでしょう。

スクリプトフィールドはLuceneの例外のシンタックスを利用しています。
より詳しい情報については http://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html#_lucene_expressions_scripts[Lucene Expressions Scripts] をご覧ください。

以下のように、expressionの中で、数値フィールドの単一の値を参照することができます:

----
doc['field_name'].value
----

スクリプトフィールドをつくるには:

. *Settings > Indices* を開く。
. スクリプトフィールドを追加したいインデックスパターンを選択する。
. パターンの *Scripted Fields* タブを開く。
. *Add Scripted Field* をクリックする。
. スクリプトフィールドの名前を入力する。
. インデックスのデータから、動的に計算するために利用したいexpressionを入力します。
. *Save Scripted Field* をクリックします。

Elasticsearchのスクリプトフィールドについてのより詳しい情報は、 http://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html[Scripting] をご覧ください。

NOTE: Elasticsearch releases 1.4.3以降では、この機能は {ref}/modules-scripting.html[dynamic Groovy scripting] を有効にする必要があります。

[float]
[[update-scripted-field]]
=== スクリプトフィールドの更新
スクリプトフィールドを更新するには:

. *Settings > Indices* を開く。
. 変更したいスクリプトフィールドの *Edit* ボタンをクリックします。
. 変更して、 *Save Scripted Field* をクリックするとフィールドが更新されます。

WARNING: スクリプトフィールドにはバリデーション機能が組み込まれていないことを覚えておいてください。
そのため、もしスクリプトに不具合があった場合、動的に生成されたデータを見ようとしたときはいつでも例外が発生するでしょう。

[float]
[[delete-scripted-field]]
=== スクリプトフィールドの削除
スクリプトフィールドを削除するには:

. *Settings > Indices* を開く。
. 削除したいスクリプトフィールドの *Delete* ボタンをクリックする。
. 本当にこのフィールドを削除するのかを確認する。

[[advanced-options]]
=== 高度なオプションの設定
Advanced Settingsのページでは、Kibanaの振る舞いを制御するための設定を直接変更することができます。
たとえば、表示される日付のフォーマットを変更したり、デフォルトのインデックスパターンを設定したり、表示される数値の精度を設定することができます。

WARNING: 高度な設定を変更すると、意図しない結果を生むかもしれません。
もし、何を設定しているのかが分からないのであれば、現状のままの設定にしておくのがベストです。

高度なオプションを設定するには:

. *Settings > Advanced* を開く。
. 変更したいオプションの *Edit* ボタンをクリックする
. オプションの新しい値を入力する。
. *Save* ボタンをクリックする。

[float]
[[managing-saved-objects]]
=== 保存した検索条件、可視化、ダッシュボードの管理

*Settings > Objects* から、保存した検索条件、可視化、ダッシュボードの管理を見たり、編集したり、削除することができます。
また、これらの検索条件、可視化、ダッシュボードのインポートやエクスポートもおこなうことができます。

保存したオブジェクトの閲覧では、選択した文書を *Discover*, *Visualize*, *Dashboard* のページで表示します。
細んしたオブジェクトを見るには:

. *Settings > Objects* を開く。
. 見たいオブジェクトを選択する。
. *View* ボタンをクリックする。

保存したオブジェクトの編集では、オブジェクトの定義を直接編集することができます。
オブジェクトの名前を変更したり、説明を追加したり、オブジェクトのプロパティを定義しているJSONを編集することができます。

もし、インデックスがすでに削除されているオブジェクトにアクセスしようとした場合、Kibanaはそのオブジェクトの編集ページを表示します。
以下のようにできます:

* インデックスを再生成することで、そのオブジェクトを使い続けることができます。
* オブジェクトを削除するか、違うインデックスを使うようにしてください。
* オブジェクトの `kibanaSavedObjectMeta.searchSourceJSON` が参照しているインデックス名を、存在するインデックスパターンに変更してください。
もし現在使っているインデックスの名前が変わってしまっていた場合に、この方法は役立ちます。

WARNING: オブジェクトのプロパティは、バリデーションが実行されません。
無効な変更をしてしまうと、オブジェクトが利用できなくなるでしょう。
普通は、存在するオブジェクトを直接編集する代わりに、新しいオブジェクトをつくるために *Discover*, *Visualize*, *Dashboard* ページを使うべきでしょう。

保存したオブジェクトを編集するには:

. *Settings > Objects* を開く。
. 編集したいオブジェクトを選択する。
. *Edit* ボタンをクリックする。
. オブジェクトの定義を変更する。
. *Save Object* ボタンをクリックする。

保存したオブジェクトを削除するには:

. *Settings > Objects* を開く。
. 削除したいオブジェクトを選択する。
. *Delete* ボタンをクリックする。
. 本当に消したいオブジェクトであることを確認する。

オブジェクトをエクスポートするには:

. *Settings > Objects* を開く。
. エクスポートしたいオブジェクトのタイプを選択する。ダッシュボード、検索条件、可視化のいずれかをエクスポートすることができます。
. エクスポートしたいオブジェクトのチェックボックスをクリックするか、 *Select All* をクリックする。
. *Export* をクリックし、エクスポートしたJSONを保存する場所を選択します。

オブジェクトをインポートするには:

. *Settings > Objects* を開く。
. *Import*をクリックし、インポートするためのオブジェクトのJSONファイルを指定します。
. JSONファイルを選択したあとに *Open* をクリックします。
. もし、Kibanaにすでに存在するオブジェクトを上書きするならば、上書きするかどうかの確認をおこないます。

[[kibana-server-properties]]
=== Kibanaサーバーのプロパティの設定

Kibanaサーバは、起動時に `kibana.yml` ファイルからプロパティを読み込みます。
デフォルトの設定では、 `localhost:5601` でKibanaが実行されるように設定されています。
ホスト名やポート番号を変更したい場合や、異なるマシンで実行されているElasticsearchに接続したい場合は、 `kibana.yml` ファイルを更新する必要があります。
また、SSLを有効にしたり、他の様々なオプションを設定することもできます。

deprecated[4.2, いくつかのKibanaサーバのプロパティ名は、Kibana 4.2で変更されています。
以前の名前はエイリアス機能として残っていますが、現在は推奨されず、将来リリースされたKibanaでは削除されるでしょう。]

[horizontal]
.Kibana Server Properties
`server.port` added[4.2]:: Kibanaサーバを実行するポート番号
+
*alias*: `port` deprecated[4.2]
+
*default*: `5601`

`server.host` added[4.2]:: Kibanaサーバに割り当てるホスト名
+
*alias*: `host` deprecated[4.2]
+
*default*: `"0.0.0.0"`

`elasticsearch.url` added[4.2]:: 接続したいElasticsearchのインスタンスのURL
+
*alias*: `elasticsearch_url` deprecated[4.2]
+
*default*: `"http://localhost:9200"`

`elasticsearch.preserveHost` added[4.2]:: デフォルトでは、ブラウザからKibanaにやってくるリクエストのホスト名は、KibanaがElasticsearchに送る際に対応するリクエストのホスト名として利用されます。
もしこのオプションを `false` に設定すると、Kibanaは `elasticsearch_url` に指定されたホスト名を使うようになります。
+
*alias*: `elasticsearch_preserve_host` deprecated[4.2]
+
*default*: `true`

`elasticsearch.ssl.cert` added[4.2]:: このパラメータは、クライアント証明書を要求するElasticsearchインスタンスのための、SSL証明書のパスを指定します。
+
*alias*: `kibana_elasticsearch_client_crt` deprecated[4.2]

`elasticsearch.ssl.key` added[4.2]:: このパラメータは、クライアントの認証鍵を要求するElasticsearchインスンタンスのための、SSLの認証鍵のパスを指定します。
+
*alias*: `kibana_elasticsearch_client_key` deprecated[4.2]

`elasticsearch.password` added[4.2]:: このパラメータは、ベーシック認証を利用するElasticsearchインスタンスのためのパスワードを指定します。
Kibanaサーバーを経由してElasticsearchがProxyされている場合、KibanaのユーザーはさらにElasticsearchの認証が必要になります。
+
*alias*: `kibana_elasticsearch_password` deprecated [4.2]

`elasticsearch.username` added[4.2]:: このパラメータは、ベーシック認証を利用するElasticsearchインスタンスのためのユーザー名を指定します。
Kibanaサーバーを経由してElasticsearchがProxyされている場合、KibanaのユーザーはさらにElasticsearchの認証が必要になります。
+
*alias*: `kibana_elasticsearch_username` deprecated[4.2]

`elasticsearch.pingTimeout` added[4.2]:: このパラメータは、ElasticsearchへのPingのレスポンスの最大の待ち時間(ミリ秒)を指定します。
+
*alias*: `ping_timeout` deprecated[4.2]
+
*default*: `1500`

`elasticsearch.startupTimeout` added[4.2]:: このパラメータは、Kibanaの開始時にElasticsearchを探す最大待ち時間(ミリ秒)を指定します。
Kibanaは、指定した時間が経過したあとに、Elasticsearchのクラスタの探索を繰り返し試します。
+
*alias*: `startup_timeout` deprecated[4.2]
+
*default*: `5000`

`kibana.index` added[4.2]:: 保存した検索条件、可視化、ダッシュボードが蓄えられるインデックスの名前
+
*alias*: `kibana_index` deprecated[4.2]
+
*default*: `.kibana`

`kibana.defaultAppId` added[4.2]:: Kibanaを起動した時に表示されるページ: `discover`, `visualize`, `dashboard`, `settings`
+
*alias*: `default_app_id` deprecated[4.2]
+
*default*: `"discover"`

`logging.silent` added[4.2]:: この値を `true` にすると、すべてのログ出力を抑制します。
+
*default*: `false`

`logging.quiet` added[4.2]:: この値を `true` にすると、 `error`, `fatal` のタグが付いているログと Hapi.js のエラー以外のログ出力がすべて抑制されます。
+
*default*: `false`

`logging.verbose` added[4.2]:: この値を `true` にすると、システムの利用情報とすべてのリクエストを含むすべてのイベントをログ出力します。
+
*default*: `false`

`logging.events` added[4.2]:: このパラメータに、以下の例のようなログタイプごとにタグを指定したマップを設定すると、自由にログが出力されるイベントを指定することができます:
+
[source,json]
{
  log: ['info', 'warning', 'error', 'fatal'],
  response: '*',
  error: '*'
}

`elasticsearch.requestTimeout` added[4.2]:: KibanaのバックエンドまたはElasticsearchからのレスポンスをどれくらい待つかをミリ秒で指定します。
+
*alias*: `request_timeout` deprecated[4.2]
+
*default*: `500000`

`elasticsearch.shardTimeout` added[4.2]:: Elasticsearchがシャードからのレスポンスをどれくらい待つか指定します。0を指定すると無効になります。
+
*alias*: `shard_timeout` deprecated[4.2]
+
*default*: `0`

`elasticsearch.ssl.verify` added[4.2]:: ElasticsearchのSSL認証の検証をおこなうかどうか指定します。
falseを指定すると、SSLの検証をおこないません。
+
*alias*: `verify_ssl` deprecated[4.2]
+
*default*: `true`

`elasticsearch.ssl.ca` added[4.2]:: Elasticsearchインスタンスのための、認証局が発行した証明書のパスを指定します。
証明書が検証されるように、自己証明書を使っているのかどうかを指定してください。
そうでなければ `elasticsearch.ssl.verify` を無効にしてください。
+
*alias*: `ca` deprecated[4.2]

`server.ssl.key` added[4.2]:: Kibanaサーバの鍵ファイルのパス
ブラウザとKibanaの間の通信を暗号化するために、設定する必要があります。
+
*alias*: `ssl_key_file` deprecated[4.2]

`server.ssl.cert` added[4.2]:: Kibanaサーバの証明書のファイルのパス
ブラウザとKibanaの間の通信を暗号化するために、設定する必要があります。
+
*alias*: `ssl_cert_file` deprecated[4.2]

`pid.file` added[4.2]:: プロセスIDのファイルを保存したい場所
+
*alias*: `pid_file` deprecated[4.2]
+
*default*: `/var/run/kibana.pid`

`logging.dest` added[4.2]:: Kibanaのログ出力を保存したい場所
もし指定しなかった場合は、ログ出力は標準出力に書き出されて、ファイルには保存されません。
ログファイルを指定すると、ログを標準出力に書き出すことを抑制します。
+
*alias*: `log_file` deprecated[4.2]
