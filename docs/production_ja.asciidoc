[[production]]
== 本番環境でのKibanaの利用
* <<configuring-kibana-shield, Configuring Kibana to Work with Shield>>
* <<enabling-ssl, Enabling SSL>>
* <<controlling-access, Controlling Access>>
* <<load-balancing, Load Balancing Across Multiple Elasticsearch Nodes>>

どれほど大規模にKibanaをデプロイするかは、ユースケースに依存します。
How you deploy Kibana largely depends on your use case.
もし、ユーザーが一人しかいないのであれば、Kibanaをローカルマシーン上で実行し、やりとりしたいElasticsearchのインスタンスの接続先を指すように設定することができます。
逆に、多くのKibanaヘビーユーザーがいるならば、同じElasticsearchインスタンスに接続した複数のKibanaをロードバランスする必要があるかもしれません。

Kibanaが極端に資源集約されていないのであれば、KibanaをElasticsearchのデータやマスターノードと分離することを推奨します。
Elasticsearchのクラスタのノード間でKibanaのトラフィックを分散するには、KibanaとElasticsearchのクライアントノードを同じマシン上で実行することができます。
より詳しい情報は <<load-balancing, Load Balancing Across Multiple Elasticsearch Nodes>> をご覧ください。

[float]
[[configuring-kibana-shield]]
=== Configuring Kibana to Work with Shield
もしElasticsearchのユーザー認証のためにShieldを使っているのであれば、 `.kibana` インデックスへのアクセスとクラスタの監視を可能にするために、Kibanaサーバを資格情報付きで提供する必要があります。

Kibanaサーバの資格情報の設定は以下のとおりです:

. Shieldのユーザーに `kibana4_server` の役割を割り当てます。
より詳しい情報は、Shieldのドキュメント {shield}/kibana.html#kibana4-server-role[Configuring a Role for the Kibana 4 Server] をご覧ください。

 . `kibana.yml` の `kibana_elasticsearch_username` と `kibana_elasticsearch_password` プロパティに `kibana4_server` の役割を割り当てたユーザーの資格情報を指定します:
+
[source,text]
----
kibana_elasticsearch_username: kibana4-user
kibana_elasticsearch_password: kibana4-password
----

Kibana 4のユーザーが検索条件や可視化やダッシュボードを保存したりロードしたりできるように、 `.kibana` インデックスにもアクセスできる必要があります。
より詳しい情報はShieldのドキュメント {shield}/kibana.html#kibana4-server-role[Configuring Roles for Kibana 4 Users] をご覧ください。

TIP: <<kibana-dynamic-mapping, Kibana and Elasticsearch Dynamic Mapping>> には、KibanaとElasticsearchのDynamic Mappingに関する重要な情報があります。

[float]
[[enabling-ssl]]
=== Enabling SSL
Kibanaは、クライアントからのリクエストと、KibanaからElasticsearchへのリクエストの両方で、SSLの暗号化をサポートします。

ブラウザとKibanaサーバの間で通信を暗号化するには、 `kibana.yml` の `ssl_key_file` と `ssl_cert_file` プロパティを設定します。

[source,text]
----
# SSL for outgoing requests from the Kibana Server (PEM formatted)
ssl_key_file: /path/to/your/server.key
ssl_cert_file: /path/to/your/server.crt
----

もし、Shieldを利用しているか、ElasticsearchにHTTPSのエンドポイントを提供するProxyを使っているならば、KibanaサーバとElasticsearchの間の通信を暗号化するために、HTTPSを介したKibanaからElasticsearchへのアクセスを設定することができます。

これをおこなうためには、 `kibana.yml` でElasticsearchのURLを設定するときに、HTTPSプロトコルを指定します。

[source,text]
----
elasticsearch: "https://<your_elasticsearch_host>.com:9200"
----

Elasticsearchが自己証明書を利用しているならば、PEMファイルの場所を指定するために、`kibana.yml` で `ca` プロパティを設定します。
`ca` プロパティを設定しても `verify_ssl` オプションは有効のままにしておくことができます。

[source,text]
----
# If you need to provide a CA certificate for your Elasticsearch instance, put
# the path of the pem file here.
ca: /path/to/your/ca/cacert.pem
----

[float]
[[controlling-access]]
=== Controlling access
Kibanaを通してElasticsearchのデータにアクセスすることのできるユーザを制御するために、 http://www.elastic.co/overview/shield/[Elasticsearch Shield] (Shield)を利用することができます。
Shieldは、インデックスレベルでのアクセスコントロールを提供します。
もしユーザーがKibanaの可視化をおこなうためのクエリ実行が認証されない場合、ユーザーはただ空の可視化を見るだけです。

Shieldを使ってKibanaのアクセスを設定するには、起点として `kibana4` というデフォルトの役割を利用して、KibanaのためにShieldの役割を作成します。
より詳しい情報は、 {shield}/kibana.html#using-kibana4-with-shield[Shield with Kibana 4][Using Shield with Kibana 4] をご覧ください。

[float]
[[load-balancing]]
=== Load Balancing Across Multiple Elasticsearch Nodes
Elasticsearchのクラスタに複数のノードがあるならば、Kibanaのリクエストをそれらのノードに分配する最も簡単な方法は、Elasticsearchの _クライアント_ ノードをKibanaと同じマシン上で実行することです。
Elasticsearchの暗いなとノードは、本質的にはクラスタの一部である賢いロードバランサーです。
それらは、やってきたHTTPリクエストを処理し、必要に応じてクラスタ内の他のノードに処理をリダイレクトし、結果を集めて返します。
より詳しい情報はElasticsearchのリファレンスの http://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html[Node] をご覧ください。

Kibanaのリクエストをロードバランスするために、ローカルクライアントノードを使うには:

. Kibanaと同じマシンにElasticsearchをインストールします。
. ノードをクライアントノードに設定します。
`elasticsearch.yml` の `node.data` と `node.master` の両方を `false` に設定します。
+
--------
# 3. You want this node to be neither master nor data node, but
#    to act as a "search load balancer" (fetching data from nodes,
#    aggregating results, etc.)
#
node.master: false
node.data: false
--------
. クライアントノードをElasticsearchのクラスタに参加させるように設定します。
`elasticsearch.yml` の `cluster.name` にクラスタ名を設定します。
+
--------
cluster.name: "my_cluster"
--------
. Kibanaが、ローカルのクライアントノードを指すように設定されていることを確認します。
`kibana.yml` の `elasticsearch_url` が `localhost:9200` に設定されていなければなりません。
+
--------
# The Elasticsearch instance to use for all your queries.
elasticsearch_url: "http://localhost:9200"
--------
